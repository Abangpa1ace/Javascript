[Site Clone Coding]

- 유용한 사이트(Remind!) : Google Fonts, Font Awesome(icon)

- 두가지 성질 동시구현
  * box-shadow: inset -9em 0 0 0 #ccc, inset 9em 0 0 0 #ccc;

- box-shadow : 테두리를 감싼 그림자 효과
  * { <offset-X> <offset-Y> <blur-radius> <spread-radius> }, inset(안쪽으로), color(색깔)
- 리스트 가로정렬 : a태크 block 성질로 링크구현
  * li{display: inline;} > a{display: inline-block;}

- 박스 비대칭 태두리
  * border-radius : 6px 0;

- 박스 밑에 화살표
  li a span::before {
      content: '';
      position: absolute;
      left: 50%;
      bottom: -5px;
      border-top: 5px solid #000; *
      border-left: 5px solid transparent; *
      border-right: 5px solid transparent; *
      margin-left: -5px;
  }

- 3단 colume구조 반응성 만들기 (center width 바뀜)
  #contents .container {position: relative;}
  * 왼쪽은 float, width값 부여.
  .cont-left {float: left; width: 250px; height: 1000px; background: red;} 
  * width 미부여(반응성), 왼쪽 침범은 overflow:hidden / 오른쪽 침범은 margin으로 없앰
  .cont-center {overflow: hidden; background: blue; height: 1000px; margin-right: 250px; }
  * 오른쪽은 position:absolute, width값 부여.
  .cont-right {position: absolute; right: 0; top: 0; width: 250px; height: 1000px; 
      background: red;}

- CSS !important : 우선순위 영향없이 absolute 적용

- 한줄효과: li {overflow: hidden; text-overflow: ellipsis; white-space: nowrap;}
- 두줄효과: li {overflow: hidden; text-overflow: ellipsis;
  display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 2;}
  * -webkit: 벤딩 프리픽스(크롬,사파리) -> 호환성(CSS Crossing Browser)

- 그림 semantic tag : <figure><img src="~"></figure>
  * <figcaption>설명~</figcaption>

- 고해상도 이미지 선택
  * 다음 트로이: device별 pixel-ratio 사이트
  1) @mediaquery 조건부(pixel-ratio: 1.5) - 호환성 높음
    * .col-left3 .re-img {display: none;}   <평소 고해상도 none>
      @media only screen and (-webkit-min-device-pixel-ratio: 1.5),
      only screen and (min-device-pixel-ratio: 1.5),
      only screen and (min-resolution: 1.5dppx) {
          .col-left3 .re-img {display: initial;}    <고해상도 initial>
          .col-left3 .no-img {display: none;}       <저해상도 none>
      }

  2) img srcset="[이미지소스] [조건]" - HTML 5.1 신기술
    * <img srcset="img/blog2_@1.jpg 1x, img/blog2_@2.jpg 2x" alt="alternative-img">

  3) @mediaquery + background 이용 - 호환성 높음, HTML 깔끔해짐(Best now!)
    * .blog3 .retina {
    background-image: url(../img/blog4_@1.jpg);
    background-size: cover;
    }
    @media only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (min-device-pixel-ratio: 2),
    only screen and (min-resolution: 2dppx) {
        .blog3 .retina {background-image: url(../img/blog4_@2.jpg);}
    }
    @media only screen and (-webkit-min-device-pixel-ratio: 3),
    only screen and (min-device-pixel-ratio: 3),
    only screen and (min-resolution: 3dppx) {
        .blog3 .retina {background-image: url(../img/blog4_@3.jpg);}
    }

- 이미지 슬라이드(slick.js)
  * kenwheeler.github.io/slick/ : slick.js source 사이트 -> usage(셋팅방법)
  
  
  [requestAnimationFrame]

- window.requestAnimationFrame(); : 애니메이션 최적화(부드럽게)
  * 전에는 setInterval() 사용 -> frame 유실, 모바일기기 배터리 많이 들어감


[부드럽게 감속하기]

- window.addEventListner('scroll', () => {
  box.style.width = `${window.pageYOffset}px`
})
// [구] 방향키 스크롤 시, 딜레이 걸림

  function loop() {
    delayYOffset = delayYOffset + (pageYOffset-delayYOffset) * 0.1;
    box.style.width = `${delayYOffset}px`;

    rafId = requestAnimationFrame(loop);    -> loop 취소담당
    if (pageYOffset - delayYOffset < 1) {
      cancelAnimationFrame(rafId);
      rafState = false;
    }
  }
// [신] requestAnimationFrame으로 loop 반복. YOffset을 남은 런타임의 0.1배씩 진행시키며 딜레이 완화.


[SVG 애니메이션]   * 로딩 원 만드는 방법(CSS보다 애니메이션 용이)
- svg태그 -> circle태그(cx=x좌표, cy=y좌표, r=반지름)
  * viewbox = "x좌표 y좌표 width height"  : 기준크기
- svg크기설정(CSS)
  * stroke : 테두리 -> stroke-dasharray: 점선주기, stroke-dashoffset: 점선주기 변형
  * fill: 채우기
- svg 애니메이션(CSS keyframes)
  * @keyframes loading-circle-ani(애니명) {
    0% {stroke-dashoffset: 157;}
    75% {stroke-dashoffset: -147;}
    100% {stroke-dashoffset: -157;}
  }
- loading 시, opacity 0으로 변경 
  -> 클릭 등 안됨 : transitionend 이벤트 후, removeChild('.loading')
    * (e) => {removeChild(e.currentTarget)} : 최근 타겟요소(.loading)를 삭제
    * 바로 removeChild를 쓰면, 반응성 없음(transition)


[will-change] : transition을 브라우저에 미리 알림
- will-change: transform, opacity
  * 브라우저 속도를 저하시키므로, 남발하면 안됨!


[버그 수정]
1) #scr1이 setLayout() 계산되기 전에 display => .before-load .container {display: none}
2) 새로고침 시 스크롤 없으면 흰색 화면 => setInterval(() => {window.scrollTo(0, tempYoffset);})
  * setTimeout(() => {실행문}, 시간) : 일정시간동안 반복
  * setInterval(() => {실행문}, 주기) : 주기간격으로 반복 -> count++과 clearInterval(siID)로 종료.
